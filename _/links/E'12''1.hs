--
--
--
-----------------
-- Exercise 12.1.
-----------------
--
--
--
module E'12''1 where



import Pictures 
 (
   Picture
 , black
 , white
 , beside
 , above
 , height
 , printPicture
 )



 
alternate :: a -> a -> [a]
alternate a b = a : b : alternate a b   -- Note: this is called a 'stream'.


chessBoard :: Int -> Picture
chessBoard n

 = let nothing = [ [] | _ <- [1 ..] ]
       whiteBlack = (  foldr beside nothing ( take n (alternate white black) )  )
       blackWhite = (  foldr beside nothing ( take n (alternate black white) )  )
	   
   in  foldr above [] (take n $ alternate whiteBlack blackWhite)

-- GHCi> printPicture $ chessBoard 1
-- ......
-- ......
-- ......
-- ......
-- ......
-- ......

-- GHCi> printPicture $ chessBoard 8
-- ......######......######......######......######
-- ......######......######......######......######
-- ......######......######......######......######
-- ......######......######......######......######
-- ......######......######......######......######
-- ......######......######......######......######
-- ######......######......######......######......
-- ######......######......######......######......
-- ######......######......######......######......
-- ######......######......######......######......
-- ######......######......######......######......
-- ######......######......######......######......
-- ......######......######......######......######
-- ......######......######......######......######
-- ......######......######......######......######
-- ......######......######......######......######
-- ......######......######......######......######
-- ......######......######......######......######
-- ######......######......######......######......
-- ######......######......######......######......
-- ######......######......######......######......
-- ######......######......######......######......
-- ######......######......######......######......
-- ######......######......######......######......
-- ......######......######......######......######
-- ......######......######......######......######
-- ......######......######......######......######
-- ......######......######......######......######
-- ......######......######......######......######
-- ......######......######......######......######
-- ######......######......######......######......
-- ######......######......######......######......
-- ######......######......######......######......
-- ######......######......######......######......
-- ######......######......######......######......
-- ######......######......######......######......
-- ......######......######......######......######
-- ......######......######......######......######
-- ......######......######......######......######
-- ......######......######......######......######
-- ......######......######......######......######
-- ......######......######......######......######
-- ######......######......######......######......
-- ######......######......######......######......
-- ######......######......######......######......
-- ######......######......######......######......
-- ######......######......######......######......
-- ######......######......######......######......
 

 
 
