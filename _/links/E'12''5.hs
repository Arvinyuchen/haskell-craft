--
--
--
-----------------
-- Exercise 12.5.
-----------------
--
--
--
module E'12''5 where



import Pictures
 (
   Picture
 )




type Rep =  ( Int , Int , [(Int , Int)] )



-- "rotate":
------------


rotate90 :: Rep -> Rep
rotate90 ( w , h , ps )  -- "w"; width, "h"; height, "ps"; positions
 
 =  ( h , w , map ( \(hp , wp) -> (wp, h - hp - 1) ) ps )


{- GHCi>


:load E'12''3 E'12''4 E'12''5
:m +E'12''3 E'12''4 E'12''5 Pictures

let picture = horse `beside` horse

printPicture picture
pictureToRep picture
rotate90 it
(\(a,b,c) -> makePicture a b c) it
printPicture it


-}
-- .......##..........##...
-- .....##..#.......##..#..
-- ...##.....#....##.....#.
-- ..#.......#...#.......#.
-- ..#...#...#...#...#...#.
-- ..#...###.#...#...###.#.
-- .#....#..##..#....#..##.
-- ..#...#.......#...#.....
-- ...#...#.......#...#....
-- ....#..#........#..#....
-- .....#.#.........#.#....
-- ......##..........##....
-- 
-- ............
-- .....#......
-- ....#.###...
-- ...#.....#..
-- ..#......#..
-- .#........#.
-- #...####..#.
-- ####..#....#
-- ......#....#
-- .....#....#.
-- .....#####..
-- ............
-- ............
-- .....#......
-- ....#.###...
-- ...#.....#..
-- ..#......#..
-- .#........#.
-- #...####..#.
-- ####..#....#
-- ......#....#
-- .....#....#.
-- .....#####..
-- ............


rotate :: Rep -> Rep
rotate

 =  rotate90 . rotate90

{- GHCi>


:load E'12''3 E'12''4 E'12''5
:m +E'12''3 E'12''4 E'12''5 Pictures

let rotate = E'12''5.rotate
let picture = horse `beside` horse

printPicture picture
pictureToRep picture
rotate it
(\(a,b,c) -> makePicture a b c) it
printPicture it


-}
-- .......##..........##...
-- .....##..#.......##..#..
-- ...##.....#....##.....#.
-- ..#.......#...#.......#.
-- ..#...#...#...#...#...#.
-- ..#...###.#...#...###.#.
-- .#....#..##..#....#..##.
-- ..#...#.......#...#.....
-- ...#...#.......#...#....
-- ....#..#........#..#....
-- .....#.#.........#.#....
-- ......##..........##....
--
-- ....##..........##......
-- ....#.#.........#.#.....
-- ....#..#........#..#....
-- ....#...#.......#...#...
-- .....#...#.......#...#..
-- .##..#....#..##..#....#.
-- .#.###...#...#.###...#..
-- .#...#...#...#...#...#..
-- .#.......#...#.......#..
-- .#.....##....#.....##...
-- ..#..##.......#..##.....
-- ...##..........##.......



-- reflect:
-----------


flipV :: Rep -> Rep
flipV ( w , h , ps )

 =  ( w , h , map ( \(a , b) -> (a , w - b - 1) ) ps )


{- GHCi>


:load E'12''3 E'12''4 E'12''5
:m +E'12''3 E'12''4 E'12''5 Pictures

let flipV = E'12''5.flipV
let picture = horse `beside` horse

printPicture picture
pictureToRep picture
flipV it
(\(a,b,c) -> makePicture a b c) it
printPicture it


-}
-- .......##..........##...
-- .....##..#.......##..#..
-- ...##.....#....##.....#.
-- ..#.......#...#.......#.
-- ..#...#...#...#...#...#.
-- ..#...###.#...#...###.#.
-- .#....#..##..#....#..##.
-- ..#...#.......#...#.....
-- ...#...#.......#...#....
-- ....#..#........#..#....
-- .....#.#.........#.#....
-- ......##..........##....
-- 
-- ...##..........##.......
-- ..#..##.......#..##.....
-- .#.....##....#.....##...
-- .#.......#...#.......#..
-- .#...#...#...#...#...#..
-- .#.###...#...#.###...#..
-- .##..#....#..##..#....#.
-- .....#...#.......#...#..
-- ....#...#.......#...#...
-- ....#..#........#..#....
-- ....#.#.........#.#.....
-- ....##..........##......


flipH :: Rep -> Rep
flipH ( w , h , ps )

 =  ( w , h , map ( \(a , b) -> (h - a - 1 , b) ) ps )


{- GHCi>


:load E'12''3 E'12''4 E'12''5
:m +E'12''3 E'12''4 E'12''5 Pictures

let flipH = E'12''5.flipH
let picture = horse `beside` horse

printPicture picture
pictureToRep picture
flipH it
(\(a,b,c) -> makePicture a b c) it
printPicture it


-}
-- .......##..........##...
-- .....##..#.......##..#..
-- ...##.....#....##.....#.
-- ..#.......#...#.......#.
-- ..#...#...#...#...#...#.
-- ..#...###.#...#...###.#.
-- .#....#..##..#....#..##.
-- ..#...#.......#...#.....
-- ...#...#.......#...#....
-- ....#..#........#..#....
-- .....#.#.........#.#....
-- ......##..........##....
--
-- ......##..........##....
-- .....#.#.........#.#....
-- ....#..#........#..#....
-- ...#...#.......#...#....
-- ..#...#.......#...#.....
-- .#....#..##..#....#..##.
-- ..#...###.#...#...###.#.
-- ..#...#...#...#...#...#.
-- ..#.......#...#.......#.
-- ...##.....#....##.....#.
-- .....##..#.......##..#..
-- .......##..........##...



-- "superimpose":
-----------------


superimpose :: Rep -> Rep -> Rep
superimpose (w1 , h1 , ps1) (w2 , h2 , ps2)

 =  ( max w1 w2 , max h1 h2 , ps1 ++ ps2 )


{- GHCi>


:load E'12''3 E'12''4 E'12''5
:m +E'12''3 E'12''4 E'12''5 Pictures

let superimpose = E'12''5.superimpose
let p0 = E'12''5.examples !! 0
let p1 = E'12''5.examples !! 1

printPicture p0
printPicture p1

let r0 = pictureToRep p0
let r1 = pictureToRep p1

superimpose r0 r1
(\(a,b,c) -> makePicture a b c) it
printPicture it


-}
-- ######
-- #....#
-- #....#
-- #....#
-- #....#
-- ######
--
-- ......
-- ......
-- ..##..
-- ..##..
-- ......
-- ......
--
-- ######
-- #....#
-- #.##.#
-- #.##.#
-- #....#
-- ######



examples :: [Picture]
examples

 =  [
      [
	    "######" ,
		"#....#" ,
		"#....#" ,
		"#....#" ,
		"#....#" ,
		"######"
	  ]
	  ,
	  [
	    "......" ,
		"......" ,
		"..##.." ,
		"..##.." ,
		"......" ,
		"......"
	  ]
    ]




